//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Biking.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Position", Namespace="http://schemas.datacontract.org/2004/07/MapService")]
    [System.SerializableAttribute()]
    public partial class Position : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LngField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lat {
            get {
                return this.LatField;
            }
            set {
                if ((this.LatField.Equals(value) != true)) {
                    this.LatField = value;
                    this.RaisePropertyChanged("Lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Lng {
            get {
                return this.LngField;
            }
            set {
                if ((this.LngField.Equals(value) != true)) {
                    this.LngField = value;
                    this.RaisePropertyChanged("Lng");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocation", ReplyAction="http://tempuri.org/IService1/GetLocationResponse")]
        Biking.ServiceReference2.Position GetLocation(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocation", ReplyAction="http://tempuri.org/IService1/GetLocationResponse")]
        System.Threading.Tasks.Task<Biking.ServiceReference2.Position> GetLocationAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestStationPosition", ReplyAction="http://tempuri.org/IService1/FindNearestStationPositionResponse")]
        Biking.ServiceReference2.Position FindNearestStationPosition(string address, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestStationPosition", ReplyAction="http://tempuri.org/IService1/FindNearestStationPositionResponse")]
        System.Threading.Tasks.Task<Biking.ServiceReference2.Position> FindNearestStationPositionAsync(string address, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestDestinationStationPosition", ReplyAction="http://tempuri.org/IService1/FindNearestDestinationStationPositionResponse")]
        Biking.ServiceReference2.Position FindNearestDestinationStationPosition(string address, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestDestinationStationPosition", ReplyAction="http://tempuri.org/IService1/FindNearestDestinationStationPositionResponse")]
        System.Threading.Tasks.Task<Biking.ServiceReference2.Position> FindNearestDestinationStationPositionAsync(string address, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindRoute", ReplyAction="http://tempuri.org/IService1/FindRouteResponse")]
        Biking.ServiceReference2.Position[] FindRoute(string contract, string startPoint, string endPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindRoute", ReplyAction="http://tempuri.org/IService1/FindRouteResponse")]
        System.Threading.Tasks.Task<Biking.ServiceReference2.Position[]> FindRouteAsync(string contract, string startPoint, string endPoint);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Biking.ServiceReference2.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Biking.ServiceReference2.IService1>, Biking.ServiceReference2.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Biking.ServiceReference2.Position GetLocation(string address) {
            return base.Channel.GetLocation(address);
        }
        
        public System.Threading.Tasks.Task<Biking.ServiceReference2.Position> GetLocationAsync(string address) {
            return base.Channel.GetLocationAsync(address);
        }
        
        public Biking.ServiceReference2.Position FindNearestStationPosition(string address, string contract) {
            return base.Channel.FindNearestStationPosition(address, contract);
        }
        
        public System.Threading.Tasks.Task<Biking.ServiceReference2.Position> FindNearestStationPositionAsync(string address, string contract) {
            return base.Channel.FindNearestStationPositionAsync(address, contract);
        }
        
        public Biking.ServiceReference2.Position FindNearestDestinationStationPosition(string address, string contract) {
            return base.Channel.FindNearestDestinationStationPosition(address, contract);
        }
        
        public System.Threading.Tasks.Task<Biking.ServiceReference2.Position> FindNearestDestinationStationPositionAsync(string address, string contract) {
            return base.Channel.FindNearestDestinationStationPositionAsync(address, contract);
        }
        
        public Biking.ServiceReference2.Position[] FindRoute(string contract, string startPoint, string endPoint) {
            return base.Channel.FindRoute(contract, startPoint, endPoint);
        }
        
        public System.Threading.Tasks.Task<Biking.ServiceReference2.Position[]> FindRouteAsync(string contract, string startPoint, string endPoint) {
            return base.Channel.FindRouteAsync(contract, startPoint, endPoint);
        }
    }
}
